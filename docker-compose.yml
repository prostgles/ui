# docker-compose.yml

version: "3.7"
services:
  postgres:
    image: postgis/postgis:16-3.4

    # Survive server reboot
    restart: always

    environment:
      POSTGRES_DB: "POSTGRES_DB"
      POSTGRES_USER: "POSTGRES_USER"
      POSTGRES_PASSWORD: "POSTGRES_PASSWORD"

    # Used to allow creating pg_stat_statements extension to track query performance
    command:
      postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 && \
      apt-get update && apt-get install -y procps

    ports:
      - 5432/tcp

    # This affects user creation. Comment out to ensure user (POSTGRES_USER) is created
    volumes:
      - prgl-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sleep 1 && pg_isready"]
      timeout: 3s
      retries: 5

  prgl:
    image: prgl

    # Survive server reboot
    restart: always

    build:
      context: .
      dockerfile: Dockerfile

    environment:
      POSTGRES_DB: "POSTGRES_DB"
      POSTGRES_USER: "POSTGRES_USER"
      POSTGRES_PASSWORD: "POSTGRES_PASSWORD"
      PROSTGLES_UI_HOST: "0.0.0.0"
      POSTGRES_HOST: postgres
      IS_DOCKER: "yes"
      NODE_ENV: "production"

    depends_on:
      postgres:
        condition: service_healthy

    ## Used to allow connecting to a database from the host
    extra_hosts:
      - "host.docker.internal:host-gateway"

    ## DEBUG -> Ensure NODE_ENV above is not set to 'production'
    # command: node --inspect=0.0.0.0:9229 /usr/src/app/server/dist/server/src/index.js
    command: node /usr/src/app/server/dist/server/src/index.js
    ports:
      - "${PRGL_DOCKER_IP:-127.0.0.1}:${PRGL_DOCKER_PORT-3004}:3004"
      # DEBUG
      # - '${PRGL_DOCKER_IP:-127.0.0.1}:9229:9229'

volumes:
  prgl-db:
